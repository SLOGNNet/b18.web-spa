import { hexToRgb, getRGBString } from '.';

describe('Convert color helper', () => {
  const testRedHexColor = '#fb3a3a';
  const testRedRGBString = 'rgb(251, 58, 58)';
  const testRedRGBCollection = [ 251, 58, 58 ];
  const notValidData = 123;
  const notValidString = '#zzz';
  const notValidRGBArray = [ 12, 12, 12, 12 ];
  const notValidRGBCollection = [ 12, 'a', 12 ];


  it('should convert color from hex ot rgb format', () => {
    expect(hexToRgb(testRedHexColor)).toEqual(testRedRGBCollection);
  });

  it('should return color string generated by hexToRgb function result', () => {
    expect(getRGBString(testRedRGBCollection)).toBe(testRedRGBString);
  });

  it('should throw error when type of hex data isn\'t string', () => {
    expect(() => hexToRgb(notValidData)).toThrowError('Expected a string');
  });

  it('should throw error when data string is not valid', () => {
    expect(() => hexToRgb(notValidString)).toThrowError('Input data is not valid');
  });

  it('should throw error when type of rgb collection data isn\'t Array', () => {
    expect(() => getRGBString(notValidData)).toThrowError('Expected an Array');
  });

  it('should throw error when input array\'s length is wrong', () => {
    expect(() => getRGBString(notValidRGBArray)).toThrowError('Expected an Array');
  });

  it('should throw error when input array\'s contains wrong values', () => {
    expect(() => getRGBString(notValidRGBCollection)).toThrowError('Expected an Array');
  });

});
